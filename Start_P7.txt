***Création du repo Git  
https://github.com/matthieu661/P7_Boistard_Matthieu
clone repos sur matthieu pc secours
***Création d'une collection Postman "P7"

***methode :
Aprés installation clean --> commit --> New branch "base Projet" (.save)

SQL:
    -Creation de la database Groupomania :
    -log to mysql avec le root 
        - cmd --> mysql -uroot --> demande le mdp : Antilops123 --> connecté
    -Création de la DB
        - CREATE DATABASE groupomania;
BACKEND:
    -Creation du .gitignore ( add --> startP7 / ... )
    -Installation de nmp --> ps : npm install
    -Initialisation de npm --> ps : npm install
    add-on :
    -Installation de nodemon : ps : npm install --save-dev nodemon (autorefresh)
                    https://www.npmjs.com/package/nodemon
    -Installation de expresse : ps : npm install express --save (framework)
                    http://expressjs.com/
    -Installation de sequalize : ps : npm install --save sequelize (ODM gestion SQL -- remplace mongoose)
                    https://sequelize.org/master/manual/getting-started.html

Retour sur Master -->


--->New branche 'BackEnd' aprés le setup du projet
    -new branch 'function_X' pour chaques étapes clée puis merge.

        -création de la structure basique du Backend
            - Fichier server src : --> server.js
            - Fichier Racine express : --> app.js
            - Installation de sequelize-cli --> npm install sequelize-cli
            --> structure du BACKEND :
                - Init de sequelize --> npx sequelize init (not npm=npX)
                    - Fichier config\config.json (crée par sequelize-cli)
                    - Dossier models (crée par sequalize-cli)
                    - Dossier migrations (crée par sequalize-cli)
                    - Dossier seeders (crée par sequelize-cli)
                - Dossier middleweare
                - Dossier route
                - Dossier controller 

                        commit --> git add . --> git commit -m"structure backend"

    --->New branch BackEnd_Sql_Config 

        - Installation de sql dans le projet : npm install sql2
        - Connection à workbench 8.0 --> root mdp(Antilops123)    
                -query : DROP DATABASE IF EXISTS groupomania;
                        CREATE DATABASE groupomania; (test)

            - config de sequelize : 
                https://github.com/sequelize/sequelize/tree/3e5b8772ef75169685fc96024366bca9958fee63
                https://sequelize.org/master/index.html

                - config\config.json : changement password : Antilops123 et database : groupomania

                - config server.js : 
                    - Supression du template server.js
                    - Import de la database sequelize ( chemin basique ) :  --> const db = require("./models");
                    - Appel de la la db via sync.sequelize ( modification de la function template L-45); (X.sequelize.sync)

                - Creation des models de donnée (tables) via sequelize :
                    - 1 création d'un model générique Todo --> ./models/Todos.js
                    - 2 verification dans workbench ( schema --> groupomania --> tables )
                    - 3 création d'une route test : ./routes/apiRoutes
                    - 4 Ajout du chemin dans app.js
                    - 5 test de connexion avec POSTMAN 
                        - P7 collection --> GET : http://localhost:3000/api/all
                        - result = pass OK
                
                            commit --> git add . --> git commit -m "Sequalize configuration basique + Test postman"                
    
    --->New branch BackEnd_Sequelize_Routes

        - création de 5 requetes basique ( CRUD )vers la table Todo(table de test)
            get all : OK
                  Postman --> get http://localhost:3000/api/all
            Post create : OK 
                  Postman --> post http://localhost:3000/api/new
            Get One : OK 
                  Postman --> get http://localhost:3000/api/find/id
            Put modify :
                  Postman --> put http://localhost:3000/api/modify
                  (attention à l'id il passe dans le body)
            Delete One : 
                  Postman --> delete http://localhost:3000/api/delete/id

                        commit --> "POSTMAN des 5 routes basiques"

1 End
2 Start

        - création des models sequelize pour les routes de groupomania 
            https://sequelize.org/master/manual/model-basics.html#:~:text=A%20model%20in%20Sequelize%20has%20a%20name.%20This,%28such%20as%20Users%29%2C%20although%20this%20is%20fully%20configurable.

            mémo : association
            La création d’associations dans sequelize se fait en appelant l’une des fonctions belongsTo / hasOne / hasMany / belongsToMany sur un modèle (la source), et en fournissant un autre modèle comme premier argument à la fonction (la cible).‎

                ‎hasOne - ajoute une clé étrangère à la cible et des mixins d’association singuliers à la source.‎

                ‎belongsTo - ajoutez une clé étrangère et des mixins d’association singuliers à la source.‎

                ‎hasMany - ajoute une clé étrangère aux mixins d’association cible et pluriel à la source.‎

                ‎belongsToMany - crée une association N:M avec une table de jointure et ajoute des mixins d’association pluriels à la source. La table de jonction est créée avec sourceId et targetId.‎

            -création des fichiers models template :

                - ./models/user.js  
                    Parent --> ( ps : ne pas declarer 2x la methode ".associate" )
                - ./models/Profile.js
                    enfant
                - ./models/post.js
                    enfant

            -création des fichiers routes :

                - ./routes/user-routes.js
                - ./routes/profile-routes.js
                - ./routes/post-routes.js

            - création de la logique basique (temporairement dans les fichiers routes) :

 EN COURS :  etape 1

               - ./routes/user-routes.js :
                    - create user OK
                        Postman OK 
                    - find All user (min) OK
                        Postman OK
                    - find All user (max) --> J+1 edit : ajout des données (db.Post ) dans la response
                        Postman OK

                        edit J+1 :
                    - find One OK
                        Postman OK
                    - modify OK
                        PostMAN ok
                    - delete NO --> Cannot delete or update a parent row: a foreign key constraint fails 

                    le onDelete Cascade ne fonctionne pas.

                    solution Trouvé : passé par le front et demander la suppression des POST et PROFILE avant. 



               - ./routes.profile-routes.js :

                    - create profile OK
                        Postman OK
                    - Find One OK --> J+1 edit : ajout des données ( db.User ) dans la response
                        Postman OK
                    - Find All OK   
                        Postman OK

                                    edit J+1 :
                    - modify OK
                        Postman OK
                    - delete OK
                        Postman OK
                    
                - ./routes/post-routes.js :

                                    edit J+1 :
                    - create OK
                        Postman OK --> (RAPPEL : Postman sensible aux espaces dans les champs)
                    - get One  OK
                        Postman OK
                    - modify OK
                        Postman OK
                    - Delete One OK
                        Postman OK

                        J0  commit --> "Mise en place de l'association des tables et logique template des routes"


                        J+1 commit -->  "Bloquage DeleteUser " 

                    

---> New branch Données groupomania
A FAIRE :  Etape 2 : route specifique à l'application et models definis

A FAIRE :  Etape 3 : structure du projet, deplacer la logique dans les controlers, créer les middleware de securité et validation

A FAIR : Etape 4 : guide de fonctionnement de l'Api
                     

                    




    ****            - utilisation des migrations : --> ./sequelize.txt




-New branch 'Frontend' aprés la réalisation du FrontEnd
    -new branch 'function' pour chaques étapes puis merge.
..
-New branch 'soutenance' pour la présentation

***Techno :
FrontEnd :
-Vue.js / Scss

Backend :
-express (framework)
-sequalize (ODM)
-mysql (bdd)
-workbench 8.0 (visual sql)
-PostMAN (route helper)

***Setup projet :
-node
-npm init
-npm install sequelize sequelize-cli sql2
...
